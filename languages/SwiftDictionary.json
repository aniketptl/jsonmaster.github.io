{
    "modelStart": "{\n",
    "reservedKeywords": [
        "associatedtype", 
        "class", 
        "deinit", 
        "enum", 
        "extension", 
        "fileprivate", 
        "func", 
        "import", 
        "init", 
        "inout", 
        "internal", 
        "let", 
        "open", 
        "operator", 
        "private", 
        "protocol", 
        "public", 
        "static", 
        "struct", 
        "subscript", 
        "typealias", 
        "var",
        "break", 
        "case", 
        "continue", 
        "default", 
        "defer", 
        "do", 
        "else", 
        "fallthrough", 
        "for", 
        "guard", 
        "if", 
        "in", 
        "repeat", 
        "return", 
        "switch", 
        "where", 
        "while",
        "as", 
        "Any", 
        "catch", 
        "false", 
        "is", 
        "nil", 
        "rethrows", 
        "super", 
        "self", 
        "Self", 
        "throw", 
        "throws", 
        "true", 
        "try",
        "associativity", 
        "convenience", 
        "dynamic", 
        "didSet", 
        "final", 
        "get", 
        "infix", 
        "indirect", 
        "lazy", 
        "left", 
        "mutating", 
        "none", 
        "nonmutating", 
        "optional", 
        "override", 
        "postfix", 
        "precedence", 
        "prefix", 
        "Protocol", 
        "required", 
        "right", 
        "set", 
        "Type", 
        "unowned", 
        "weak", 
        "willSet"
    ],

    "dataTypes": {
        "arrayType": "[<!ElementType!>]",
        "generic": "Any",
        "string": "String",
        "boolean": "Bool",
        "float": "Double",
        "doubleType": "Double",
        "characterType": "Character",
        "longType": "Double",
        "int": "Int"
    },

    "typesWithCustomFetchMethod": [
        "String",
        "Bool",
        "Double",
        "Int",
        "Any"
    ],

    "customFetchTypeReplacement": [
        ".stringValue",
        ".boolValue",
        ".doubleValue",
        ".intValue",
        ""
    ],

    "modelDefinition": "\n<!ModelIdentifier!> <!ModelName!> ",
    "getter": "",
    "setter": "",
    "fileExtension": "swift",
    "instanceVarDefinition": "\t<!VarNameKey!> <!VarName!>: <!VarType!>?\n",
    "modelEnd": "\n}",
    "staticImports": "import Foundation",
    "supportsCamelcasing": true,
    "methods": {
        "constructorName": "Initializer",
        "constructorChecked": "checked",
        "constructors": [{
            "signature": "\tinit(_ dict: [String: Any]) ",
            "bodyStart": "{\n",
            "bodyEnd": "\t}\n",
            "codeForEachProperty": "\t\t<!VarName!> = dict[\"<!JsonKeyName!>\"] as? <!VarType!>\n",
            "codeForEachCustomProperty": "\n\t\tif let <!VarName!>Dict = dict[\"<!JsonKeyName!>\"] as? [String: Any] {\n\t\t\t<!VarName!> = <!VarType!>(<!VarName!>Dict)\n\t\t}\n",
            "codeForEachCustomArrayProperty": "\n\t\tif let <!VarName!>DictArray = dict[\"<!JsonKeyName!>\"] as? [[String: Any]] {\n\t\t\t<!VarName!> = <!VarName!>DictArray.map { <!ElementType!>($0) }\n\t\t}\n",
            "comment": ""
        }],
        "others": {
            "dictionaryMethod": {
                "name": "toDictionary",
                "signature": "\tfunc toDictionary() -> [String: Any] ",
                "bodyStart": "{\n\t\tvar jsonDict = [String: Any]()\n",
                "bodyEnd": "\t\treturn jsonDict\n\t}\n",
                "codeForEachProperty": "\t\tjsonDict[\"<!JsonKeyName!>\"] = <!VarName!>\n",
                "codeForEachCustomProperty": "\t\tjsonDict[\"<!JsonKeyName!>\"] = <!VarName!>?.toDictionary()\n",
                "codeForEachCustomArrayProperty": "\t\tjsonDict[\"<!JsonKeyName!>\"] = <!VarName!>?.map { $0.toDictionary() }\n",
                "comment": "",
                "checked": "checked"
            }
        }
    },
    "exampleCode": "## Example\n\n\n#### Decoding:\nThe example below shows how to decode an instance of `<!RootClassName>` type from JSON object.\n\n```swift\nlet json = \"\"\"\n<!JsonString>\n\"\"\".data(using: .utf8)!\n\ndo { \n\tif let dict = try JSONSerialization.jsonObject(with: json, options: .allowFragments) as? [String: Any] {\n\t\tlet model = <!RootClassName>(dict) \n\t}\n} catch { \n\t// Handle error \n}\n```\n\n\n#### Encoding: \nThe example below shows how to encode an instance of a simple `<!RootClassName>` type into a JSON object.\n>Make sure to check `toDictionary()` method.\n```swift\nlet model = <!RootClassName>()\n// Assign value to properties.\n\nlet dict = model.toDictionary()\ndo {\n\tlet data = try JSONSerialization.data(withJSONObject: dict, options: .prettyPrinted)\n\tprint(String(data: data, encoding: .utf8)!)\n} catch {\n\t// Handle Error\n}\n```"
}